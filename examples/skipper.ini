# Syntax:
#
# A key and a value may look like this:
#
# foo = 42
#
# A key can consist of multiple symbols:
#
# foo.bar.baz = 42
#
# In this case, when the config is processed, the value 42 will be mapped to the baz field of a structure found
# on the bar field of a structure found on the foo field of the root structure that is used for parsing.
#
# Entries that look as the following:
#
# foo.bar.baz = 42
# foo.bar.qux = 84
#
# ...can be simplified by grouping:
#
# [foo.bar]
# baz = 42
# qux = 84
#
# Groups are terminated by an empty line or by another group and cannot be nested.
#
# Defining mutliple values for the same field (a form of listing):
#
# foo.bar.baz = 1
# foo.bar.baz = 2
# foo.bar.baz = 3
#
# This can be simplified by using a group:
#
# [foo.bar.baz]
# 1
# 2
# 3
#
# Structured or nested lists are not supported by the config format.
#
# Concepts in the syntax:
#
# comment:
# starts with a # character and is terminated by a \n.
#
# symbol:
# used for mapping config values to fields in an in-memory structure. Can contain the following characters:
# _-a-zA-Z0-9.
#
# key:
# contains one or more symbols, separated by . or ::, without whitespaces. It's used as the path to find the
# right field in an in-memory structure.
#
# value:
# can contain any characters excep for \, ", ', [, ], =, \n, #. When some of these characters are required in a
# value, then escaping can be used with \, or the value can be quoted with " or '. When a value is qouted with
# ", then any character can be used except for \ and ", which can be escaped with \. When a value is quoted with
# ', then any character can be used except for \ and ', which can be escaped with \.
#
# keyed value:
# consists of a key and a value separated by a = character.
#
# group:
# used for prefixing the following keyed values or values with a common key. It's defined by a key between [ and
# ]. The group is terminated by a double newline or another group.
#
# whitespace:
# the syntax ignores whitespace, except for requiring a newline as a separator. Keys are not allowed to have
# whitespace between the contained symbols.

###########
# Example
#
# This configuration file contains values for almost every skipper command line flag, some of them with some
# tweaks and currently non-existing grouping.

# General:

address = :9090
ignore-trailing-slash = false
insecure = false
proxy-preserve-host = false
dev-mode = false
support-listener = :9911
debug-listener = :9922
tls-cert = ./tls/cert.pem
tls-key = ./tls/key.pem
max-loopbacks = 9
default-http-status = 404
plugin-dir = ./plugins
lb-healthcheck-interval = 0 # disabled
reverse-source-predicate = false
remove-hop-headers = false
max-audit-body = 2048

# Route sources:

[source]
file = ./routes.eskip
inline = 'catchall: * -> status(404) -> inlineContent("Hello, world!") -> <shunt>'
poll-timeout = 3s
filters-prepend = 'lifo(128, 256, "30s")'
filters-append = 'circuit(1024, "30s")'
wait-first-load = true
default-filters-dir = ./default-filters

[source.kubernetes]
enabled = true
in-cluster = true
api-url = https://api.kubernetes.cluster
healthcheck = true
https-redirect = true
https-redirect-code = 308
ingress-class = ""
healthcheck-cidr = ""
path-mode = kubernetes-ingress
namespace = ""
east-west-enabled = true
east-west-domain = kubernetes.cluster

[source.etcd]
prefix = skipper
timeout = 1m
insecure = false
oauth-token = ""
username = foo
password = bar

# Groups allow simple listing:
[source.etcd.url]
https://etcd1.example.org
https://etcd2.example.org
https://etcd3.example.org

# Circuit breakers, rate limiters:

# For circuit breakers and rate limiters skipper also allows host specific startup settings, which requires
# structured data that this format currently doesn't support. Here we use these only as an example for
# grouping.

[breaker]
enabled = false
# comment out the unused values:
# type = rate
# window = 300s
# failures = 30

[rate-limiting]
enabled = true
type = local
max-hits = 20
time-window = 60s

# Logging:

[log.application]
output = /var/log/skipper.log
level = info
prefix = "[APP]" # need to quote because of the [ and ] chars
suppress-route-updates = true

[log.access]
enabled = true
output = /var/log/skipper-access.log
use-json = false
strip-query = true

# Metrics, tracing:

[metrics.flavor]
codahale
prometheus

[metrics]
prefix = skipper
profiling.enabled = true
debug-gc-metrics = false
runtime-metrics = true
serve-route-metrics = false
serve-host-metrics = false
backend-host-metrics = true
all-filters-metrics = false
combined-response-metrics = false
exp-decay-sample = false
compat-mode = false

[metrics.route]
response-metrics = false
backend-metrics = false
backend-error-counters = false
stream-error-counters = false
connection-metrics = true

[open-tracing]
enabled = true
initial-span = ingress

# Auth:

[auth.oauth]
url = https://auth.example.org
credentials-dir = ./credentials
scope = uid
scope = web
tokeninfo.url = https://tokeninfo.example.org
tokeninfo.timeout = 60s
tokenintrospection-timeout = 60s
webhook.timeout = 60s
oidc.secrets-file = ./oidc

# API Gateway:

[api.monitoring]
enabled = true
realm.key = realm
realm.tracking-pattern = ^services$
client.key = client
client.key = bot
client.tracking-pattern = ^component$

# Connection handling:

[net.backend]
max-idle-conns = 256
idle-conns-per-host = 32
close-idle-conns-period = 20s
flush-interval = 5ms
timeout = 60s
tls-handshake-timeout = 1s
response-header-timeout = 60s
except-continue-timeout = 1s
keepalive = 12m
dualstack = true

[net.frontend]
read-timeout = 1s
read-header-timeout = 1s
write-timeout = 1s
idle-timeout = 1s
max-header-bytes = 2e6

[net.experimental-upgrade]
enabled = true
audit = true

# Swarm support

[swarm]
enabled = true
port = 9990
max-message-buffer = 3e7
leave-timeout = 6s

[swarm.static]
self = ""
other = ""

[swarm.redis]
url = https://redis.example.org
read-timeout = 12s
write-timeout = 12s
pool-timeout = 120s
min-conns = 3
max-conns = 12

[swarm.kubernetes]
namespace = ""
label-selector-key = ""
label-selector-value = ""
